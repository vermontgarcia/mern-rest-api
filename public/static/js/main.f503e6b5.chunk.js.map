{"version":3,"sources":["Components/Home/Home.js","Components/Login/Login.js","Components/Signup/Signup.js","Components/Profile/Profile.js","404.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","console","log","props","react_default","a","createElement","user","username","loggedIn","email","onClick","handleLogin","Component","Login","Signup","Profile","NotFound","Router","_ref","Switch","Route","exact","path","render","Components_Home_Home","assign","component","SignUp","App","setState","handleRedirect","history","push","className","src_Router","withRouter","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f503e6b5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  componentWillMount (){\r\n\r\n  }\r\n\r\n  render(){\r\n    console.log(this.props);\r\n    return (\r\n      <div>\r\n        <h1>Home {this.props.state ? this.props.state.user.username : null}</h1>\r\n        <strong>{this.props.state.user.loggedIn ? this.props.state.user.email: \"Usuario no logged\"}</strong>\r\n                <button onClick={this.props.handleLogin}>Login</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass Login extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  componentWillMount (){\r\n\r\n  }\r\n\r\n  render(){\r\n    console.log(this.props);\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, {Component} from 'react'\r\n\r\nclass Signup extends Component {\r\n  render(){\r\n    return(\r\n      <h1>Signup</h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Signup;","import React, {Component} from 'react'\r\n\r\nclass Profile extends Component {\r\n  render(){\r\n    return(\r\n      <h1>Profile</h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n const NotFound = () => (\r\n    <h1>Estas perdido mijo</h1>\r\n);\r\n export default NotFound; ","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport Home from './Components/Home/Home'\r\nimport Login from './Components/Login/Login';\r\nimport SignUp from './Components/Signup/Signup';\r\nimport Profile from './Components/Profile/Profile';\r\nimport NotFound from './404';\r\n\r\n\r\n\r\nconst Router = ({state, handleLogin}) => (\r\n  <Switch>\r\n    <Route exact path='/' render={(props) => <Home handleLogin={handleLogin} state={state} {...props} />} />\r\n    <Route exact path='/login' component={Login} />\r\n    <Route exact path='/signup' component={SignUp} />\r\n    <Route exact path='/profile' component={Profile} />\r\n    <Route path='*' component={NotFound} />\r\n  </Switch>\r\n)\r\n\r\nexport default Router;","import React, { Component } from 'react';\nimport './App.css';\nimport Router from './Router'\nimport {withRouter} from 'react-router-dom';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      user: {\n        username: \"David\",\n        email: \"crusedmoss@gmail.com\",\n        loggedIn: false\n      }\n    }\n  }\n\n  handleLogin = () => {\n    let {user} = this.state;\n    user.loggedIn = !user.loggedIn;\n    this.setState({user})\n  }\n\n  handleRedirect = () => {\n    this.props.history.push('/login');\n  }\n\n  render() {\n    console.log(\"appjs\", this.props);\n    return (\n      <div className=\"App\">\n        <nav>\n            <button onClick={this.handleRedirect}>{this.state.user.loggedIn ? this.state.user.username: \"login\"}</button>\n        </nav>\n        <Router state={this.state} handleLogin={this.handleLogin} />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<WithRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}