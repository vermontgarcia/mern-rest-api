{"version":3,"sources":["Components/Common/InputField.js","Components/Common/FromButton.js","Components/Login/Login.js","Components/Signup/Signup.js","authService.js","Components/Profile/Profile.js","404.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["InputField","_ref","handleChange","title","type","name","react_default","a","createElement","className","onChange","FormButton","Login","onSubmit","this","props","handleLogin","Common_InputField","FromButton","Component","Signup","handleSignup","base_url","signup","user","history","axios","post","concat","then","res","localStorage","setItem","data","token","JSON","stringify","alert","msg","push","catch","err","response","login","logout","clear","Profile","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getItem","get","headers","x-access-token","isLoggedIn","onClick","handleLogout","NotFound","Router","Switch","Route","exact","path","render","Components_Profile_Profile","assign","Components_Login_Login","Components_Signup_Signup","component","App","e","preventDefault","console","log","target","files","value","setState","handleRedirect","username","email","loggedIn","src_Router","withRouter","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7378191f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputField = ({handleChange, title, type, name}) => (\r\n  <div className='form-field'>\r\n    <label className='label'>\r\n      {title}\r\n      <input className='input'\r\n        type={type}\r\n        name={name}\r\n        onChange={handleChange} />     \r\n    </label>\r\n  </div>\r\n)\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nconst FormButton = ({className, name, type}) => (\r\n  <button className={className} type={type}>{name}</button>\r\n  )\r\n\r\nexport default FormButton;","import React, {Component} from 'react';\r\nimport InputField from '../Common/InputField';\r\nimport FormButton from '../Common/FromButton';\r\n\r\nclass Login extends Component {\r\n  //constructor(){\r\n  //  super();\r\n  //  this.state = {\r\n  //  }\r\n  //}\r\n\r\n  componentWillMount (){\r\n\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.props);\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        <form onSubmit={this.props.handleLogin}>\r\n        <InputField title='Email:' type='email' name='email' handleChange={this.props.handleChange} />\r\n        <InputField title='Password:' type='password' name='password' handleChange={this.props.handleChange} />\r\n        <FormButton className='form-button button' type='submit' name='Log in' />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, {Component} from 'react'\r\nimport InputField from '../Common/InputField';\r\nimport FormButton from '../Common/FromButton';\r\n\r\nclass Signup extends Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>Signup</h1>\r\n        <form onSubmit={this.props.handleSignup}>\r\n          <InputField title='Name:' type='text' name='name' handleChange={this.props.handleChange} />\r\n          <InputField title='Email:' type='email' name='email' handleChange={this.props.handleChange} />\r\n          <InputField title='Password:' type='password' name='password' handleChange={this.props.handleChange} />\r\n          <InputField title='Confirm Password:' type='password' name='confirmPassword' handleChange={this.props.handleChange} />\r\n          <FormButton className='form-button button' type='submit' name='Sign up' />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Signup;","import axios from 'axios';\r\n\r\nconst base_url = 'http://localhost:3500/api';\r\n\r\n\r\nexport const signup = (user, history) => {\r\n  axios.post(`${base_url}/auth/signup`, user)\r\n    .then(res => {\r\n      localStorage.setItem('token', res.data.token);\r\n      localStorage.setItem('user', JSON.stringify(res.data.user));\r\n      alert(res.data.msg);\r\n      //console.log(res)\r\n      history.push('/')\r\n    })\r\n    .catch((err) => {\r\n      //console.log('Error Signup =====> ', err.response);\r\n      alert(err.response.data.msg);\r\n    })\r\n}\r\n\r\nexport const login = (user, history) => {\r\n  //console.log('User =====>', user)\r\n  axios.post(`${base_url}/auth/login`, user)\r\n    .then(res => {\r\n      localStorage.setItem('token', res.data.token);\r\n      localStorage.setItem('user', JSON.stringify(res.data.user));\r\n      alert(res.data.msg);\r\n      //console.log(res.data.user)\r\n      history.push('/')\r\n    })\r\n    .catch(err => {\r\n      //console.log('Error Login =====> ', err.response);\r\n      alert(err.response.data.msg);\r\n    });\r\n}\r\n\r\nexport const logout = (history) => {\r\n  //console.log('Logging out......')\r\n  localStorage.clear();\r\n  history.push('/login');\r\n}\r\n\r\n\r\nexport const upload = (user) => {\r\n  let formData = new FormData();\r\n  Object.keys(user).forEach(key => {\r\n    formData.append(key, user[key])\r\n  });\r\n  return axios.patch(`${base_url}/auth/upload`, formData)\r\n}\r\n\r\nexport const isLoggedIn = (history) => {\r\n  //console.log('Verifying token.....')\r\n\r\n  const token = localStorage.getItem('token');\r\n\r\n  //console.log(user)\r\n\r\n  axios.get(`${base_url}/auth/loggedin`, {\r\n    headers: {\r\n      'x-access-token': token\r\n    }\r\n  })\r\n    .then(res => {\r\n      //console.log('Valid token', res.data);\r\n      //alert(res.data.msg)\r\n      \r\n    })\r\n    .catch(err => {\r\n      //console.log('Invalid token', err.response.data.msg);\r\n      alert(err.response.data.msg)\r\n      history.push('/login')\r\n    });  \r\n}","import React, {Component} from 'react'\r\nimport {isLoggedIn} from '../../authService'\r\n\r\nclass Profile extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  componentWillMount (){\r\n\r\n    const token = localStorage.getItem('token');\r\n    token ? isLoggedIn(this.props.history) : this.props.history.push('/login');\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>Profile</h1>\r\n        <p onClick={this.props.handleLogout}>Logout</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n const NotFound = () => (\r\n    <h1>Estas perdido mijo</h1>\r\n);\r\n export default NotFound; ","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\n//import Home from './Components/Home/Home'\r\nimport Login from './Components/Login/Login';\r\nimport Signup from './Components/Signup/Signup';\r\nimport Profile from './Components/Profile/Profile';\r\nimport NotFound from './404';\r\n\r\n\r\n\r\nconst Router = ({state, handleLogin, handleLogout, handleChange, handleSignup}) => (\r\n  <Switch>\r\n    <Route exact path='/' render={(props) => (\r\n      <Profile\r\n        handleLogout={handleLogout}\r\n        state={state}\r\n        {...props}\r\n      />)}\r\n    />\r\n    <Route exact path='/login' render={(props) => (\r\n      <Login\r\n        handleLogin={handleLogin}\r\n        handleChange={handleChange}\r\n        state={state}\r\n        {...props}\r\n      />)}\r\n    />\r\n    <Route exact path='/signup' render={(props) => (\r\n      <Signup\r\n        handleSignup={handleSignup}\r\n        handleChange={handleChange}\r\n        state={state}\r\n        {...props}\r\n      />)}\r\n    />\r\n    \r\n    <Route path='*' component={NotFound} />\r\n  </Switch>\r\n)\r\n\r\nexport default Router;","import React, { Component } from 'react';\nimport './App.css';\nimport Router from './Router';\nimport {withRouter} from 'react-router-dom';\nimport {login} from './authService';\nimport {logout} from './authService';\nimport {signup} from './authService';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      user: {\n        username: '',\n        email: '',\n        loggedIn: false\n      }\n    }\n  }\n\n  handleLogin = (e) => {\n    e.preventDefault();\n    //console.log('Logging in.....')\n    //console.log(this.state.user);\n    login(this.state.user, this.props.history)\n  }\n  \n  handleSignup = (e) => {\n    e.preventDefault();\n    console.log('Signing up.....')\n    //console.log(this.state.user);\n    signup(this.state.user, this.props.history)\n  }\n\n  handleLogout = () => {\n    logout(this.props.history)\n  }\n\n  handleChange = (e) => {\n    const {user} = this.state;\n    let field = e.target.name;\n    user[field] = e.target.files ? e.target.files[0] : e.target.value;\n    this.setState({user})\n    //console.log(this.state.user);\n  }\n\n  handleRedirect = () => {\n    this.props.history.push('/login');\n  }\n\n  render() {\n    //console.log(\"appjs\", this.props);\n    return (\n      <div className=\"App\">\n        {/*\n        <nav>\n            <button onClick={this.handleRedirect}>{this.state.user.loggedIn ? this.state.user.username: \"login\"}</button>\n        </nav>\n        */}\n        <Router \n          state={this.state}\n          handleLogin={this.handleLogin}\n          handleLogout={this.handleLogout}\n          handleSignup={this.handleSignup}\n          handleChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<WithRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}